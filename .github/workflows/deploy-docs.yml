# .github/workflows/deploy-docs-pnpm.yml

name: Deploy VitePress Site (pnpm) to Pages

on:
  # 在推送到 main 分支时触发部署
  push:
    branches: [main] # 或者你的默认分支，如 master

  # 允许你从 Actions 选项卡手动运行此工作流程
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限，以允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许同时进行一次部署，跳过正在运行的运行之间排队的运行。
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 构建任务
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository # 步骤1：签出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取所有 git 历史记录，VitePress 的 lastUpdated 功能需要

      - name: Setup pnpm # 步骤2：设置 pnpm 环境
        uses: pnpm/action-setup@v3 # 使用官方的 pnpm setup action
        with:
          version: 9 # 指定你项目使用的 pnpm 版本，或省略以使用 .npmrc 或 package.json 中的版本
          run_install: false # 我们将在下一步手动运行 install

      - name: Set up Node.js # 步骤3：设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: 20 # 指定你项目所需的 Node.js 版本
          cache: 'pnpm' # 启用 pnpm 的缓存

      - name: Install dependencies # 步骤4：安装项目依赖
        run: pnpm install --frozen-lockfile # 使用 pnpm 安装，--frozen-lockfile 确保使用 lock 文件

      - name: Build VitePress site # 步骤5：运行构建命令
        run: pnpm run docs:build # 使用 pnpm 运行构建脚本，确保 'docs:build' 是你 package.json 中的脚本名

      - name: Setup Pages # 步骤6：配置 GitHub Pages
        uses: actions/configure-pages@v4

      - name: Upload build artifact # 步骤7：上传构建产物
        uses: actions/upload-pages-artifact@v3
        with:
          # VitePress 默认的构建输出目录
          path: .vitepress/dist

  # 部署任务
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build # 部署任务依赖于构建任务成功完成
    steps:
      - name: Deploy to GitHub Pages # 步骤8：部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
