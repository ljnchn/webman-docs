# .github/workflows/deploy-docs.yml

name: Deploy VitePress Site to Pages

on:
  # 在推送到 main 分支时触发部署
  push:
    branches: [main] # 或者你的默认分支，如 master

  # 允许你从 Actions 选项卡手动运行此工作流程
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限，以允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许同时进行一次部署，跳过正在运行的运行之间排队的运行。
# 但是，不要取消进行中的运行，因为我们希望允许这些生产部署完成。
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 构建任务
  build:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 运行器
    steps:
      - name: Checkout repository # 步骤1：签出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取所有 git 历史记录，VitePress 的 lastUpdated 功能需要

      - name: Set up Node.js # 步骤2：设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: 20 # 指定你项目所需的 Node.js 版本
          cache: 'npm' # 或 'yarn' 或 'pnpm' - 根据你的包管理器选择

      - name: Install dependencies # 步骤3：安装项目依赖
        run: npm ci # 使用 'npm ci' 在 CI 环境中更可靠，或者用 'yarn install --frozen-lockfile' 或 'pnpm install --frozen-lockfile'

      - name: Build VitePress site # 步骤4：运行构建命令
        run: npm run docs:build # 确保这里的 'docs:build' 是你 package.json 中定义的实际构建脚本名称

      - name: Setup Pages # 步骤5：配置 GitHub Pages
        uses: actions/configure-pages@v4

      - name: Upload build artifact # 步骤6：上传构建产物以供部署
        uses: actions/upload-pages-artifact@v3
        with:
          # VitePress 默认的构建输出目录
          path: .vitepress/dist

  # 部署任务
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build # 部署任务依赖于构建任务成功完成
    steps:
      - name: Deploy to GitHub Pages # 步骤7：部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
